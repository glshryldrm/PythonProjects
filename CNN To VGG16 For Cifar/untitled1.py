# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1sRlxKabp9yg4vFAIjZbvx6eyC-JgqIwA
"""

import tensorflow as tf
from tensorflow.keras.datasets import cifar10
from tensorflow.keras import layers, models, optimizers

# CIFAR-10 veri setini yükleme
(x_train, y_train), (x_test, y_test) = cifar10.load_data()

print(f"Training data shape: {x_train.shape}")
print(f"Test data shape: {x_test.shape}")

x_train, x_test = x_train / 255.0, x_test / 255.0

# Sınıf isimleri
class_names = ['airplane', 'automobile', 'bird', 'cat', 'deer',
               'dog', 'frog', 'horse', 'ship', 'truck']

import matplotlib.pyplot as plt

plt.figure(figsize=(10, 10))
for i in range(25):
    plt.subplot(5, 5, i + 1)
    plt.xticks([])
    plt.yticks([])
    plt.grid(False)
    plt.imshow(x_train[i])
    plt.xlabel(class_names[y_train[i][0]])
plt.show()


model = models.Sequential([
    layers.Conv2D(32, (3, 3), activation='relu', input_shape=(32, 32, 3)),
    layers.Conv2D(32, (3, 3), activation='relu'),
    layers.MaxPooling2D((2, 2)),
    layers.Conv2D(64, (3, 3), activation='relu'),
    layers.Conv2D(64, (3, 3), activation='relu'),
    layers.MaxPooling2D((2, 2)),
    layers.Flatten(),
    layers.Dense(128, activation='relu'),
    layers.Dense(10, activation='softmax')
])

layers.BatchNormalization()


model.summary()

learning_rate = 0.0001
optimizer = optimizers.Adam(learning_rate=learning_rate)

model.compile(optimizer=optimizer,
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])

history = model.fit(x_train, y_train, epochs=50,
                    validation_data=(x_test, y_test))

model.save('cifar10_model.keras')

test_loss, test_acc = model.evaluate(x_test, y_test, verbose=2)
print(f"Test doğruluk: {test_acc}")

predictions = model.predict(x_test)

# İlk görüntü için tahmin edilen sınıfı yazdırma
import numpy as np

index = 0  # Test setinden bir görüntü
predicted_class = np.argmax(predictions[index])
actual_class = y_test[index][0]

print(f"Tahmin edilen: {class_names[predicted_class]}")
print(f"Gerçek: {class_names[actual_class]}")